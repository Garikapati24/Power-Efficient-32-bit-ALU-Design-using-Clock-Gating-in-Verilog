module exp1(
    input  [31:0] A, B,
    input  [3:0]  ALUOp,
    output reg [31:0] Result,
    output reg Zero
);

always @(*) begin
    case (ALUOp)
        4'b0000: Result = A & B;   // AND operation
        4'b0001: Result = A | B;   // OR operation
        4'b0010: Result = A + B;   // Addition
        4'b0110: Result = A - B;   // Subtraction
        4'b0111: Result = (A < B) ? 32'b1 : 32'b0;  // Set on less than
        4'b1100: Result = ~(A | B); // NOR operation
        default: Result = 0;       // Default case
    endcase

    // Zero flag is set if result is zero
    Zero = (Result == 32'b0) ? 1'b1 : 1'b0;
end

endmodule